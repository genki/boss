#!/usr/bin/env ruby
require 'docker-api'
require 'sinatra/base'
require 'net/http'
require 'pp'

MUTEX = Mutex.new
def log(io, *args)
  MUTEX.synchronize do
    io.puts *args
    io.flush
  end
end

class Boss < Sinatra::Base
  UnbalanceError = Class.new(StandardError)

  set :bind, '0.0.0.0'
  set :port, 21081
  set :lock, true # disable concurrent access.

  # periodically check downed worker node to clean up
  get '/refresh' do
    begin
      worker_nodes.select do |node|
        node.dig('Status', 'State').to_s.downcase == 'down'
      end.each do |node|
        if name = node.dig('Description', 'Hostname')
          log STDOUT, "[I] worker node '#{name}' is down. removing."
          docker_api :delete, "/nodes/#{node['ID']}"
        end
      end
    rescue Exception => e
      log STDERR, "[E] failed to refresh: #{e}"
    else
      log STDOUT, "[I] refreshed: #{Time.now}"
    end
    'ok'
  end

  get '/update/*' do |args|
    log STDOUT, "[I] update: #{args}"
    args.split('/').each do |name|
      update_service name
    end
    'ok'
  end

  get '/drain/:host' do |host|
    log STDOUT, "[I] drain: #{host}"
    if node = node_for(host)
      version = node.dig 'Version', 'Index'
      spec = node['Spec']
      # mark node drain
      spec['Availability'] = 'drain'
      docker_api :post, "/nodes/#{node['ID']}/update",
        {version: version}, body: spec.to_json
    end
    'ok'
  end

  error do |e|
    log STDERR, "[E] error: #{e}"
  end

private
  # n0 is the initial #replicas. It should be saved across retries.
  def update_service(name, max_retry = 5, n0 = nil)
    sid, version, spec = service_for name 
    if n = spec.dig('Mode', 'Replicated', 'Replicas')
      n = n0 ? n0 : (n0 = n.to_i)

      # increase the scale
      spec['Mode']['Replicated']['Replicas'] = n + 1
      log STDOUT, "[I] spin up #{name}: #{n} -> #{n + 1}"
      docker_api :post, "/services/#{sid}/update",
        {version: version, registryAuthFrom: 'previous-spec'},
        body: spec.to_json

      # wait for (n + 1)-th replica
      60.times do
        log STDOUT, "[I] Waiting for #{n+1}-th replica..."
        tasks = tasks_for sid
        if tasks.size > n
          log STDOUT, "[I] Found #{n + 1} replicas."
          break
        end
        sleep 1
      end

      # reduce the scale
      sid, version, spec = service_for name
      spec['Mode']['Replicated']['Replicas'] = n
      log STDOUT, "[I] spin down #{name}: #{n + 1} -> #{n}"
      docker_api :post, "/services/#{sid}/update",
        {version: version, registryAuthFrom: 'previous-spec'},
        body: spec.to_json
    end
    # check if there is empty worker node
    confirm_balance name
  rescue UnbalanceError => e
    log STDERR, "[W] unbalance #{e.message}. retry..."
    sleep 3
    retry if (max_retry -= 1) >= 0
    raise e
  rescue Docker::Error::ServerError => e
    if e.message.strip == 'update out of sequence'
      log STDERR, "[W] #{e.message}. retry..."
      retry if (max_retry -= 1) >= 0
    end
    raise e
  end

  # check only workers
  def confirm_balance(name)
    nodes_tasks = Hash.new{|h,k| h[k] = 0}
    worker_nodes.select do |node|
      node.dig('Status', 'State').to_s.downcase == 'ready'
    end.each{|node| nodes_tasks[node['ID']] = 0}
    tasks_for(name).each do |task|
      nodes_tasks[task["NodeID"]] += 1
    end
    tasks = nodes_tasks.values
    raise UnbalanceError, "tasks.min == 0" if tasks.min == 0
    raise UnbalanceError, "max - min > 1: #{tasks}" if tasks.max - tasks.min > 1
  end

  def node_for(host)
    json = docker_api :get, '/nodes', filters:{name:[host]}.to_json
    Docker::Util.parse_json(json).first
  end

  def worker_nodes
    json = docker_api :get, '/nodes', filters:{role:["worker"]}.to_json
    Docker::Util.parse_json json
  end

  # [id, version, spec]
  def service_for(name)
    json = docker_api :get, '/services', filters:{name:[name]}.to_json
    s = Docker::Util.parse_json(json).first
    [s['ID'], s.dig('Version', 'Index'), s['Spec']]
  end

  def tasks_for(name)
    json = docker_api :get, '/tasks',
      filters:{service:[name], 'desired-state': ['running']}.to_json
    Docker::Util.parse_json(json)
  end

  def docker_api(method, *args)
    max_retry = 3
    begin
      Docker.connection.send method, *args
    rescue Docker::Error::TimeoutError => e
      log STDERR, "docker api error: #{e}"
      sleep 1
      retry if (max_retry -= 1) >= 0
      raise e
    end
  end
end

log STDOUT, Docker.version.pretty_inspect
Boss.run! do
  Thread.new do
    loop do
      Net::HTTP.get '127.0.0.1', '/refresh', 21081
      sleep ENV['INTERVAL'].to_f
    end
  end
end if Boss.app_file == $0
